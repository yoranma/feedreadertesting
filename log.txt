Feed Reader Testing
1.https://jasmine.github.io/

项目要求
1.设有所有必要测试：
a)设有能够全面检测项目（RSS Feed 测试、RSS Feed 属性、菜单默认状态和显示/隐藏菜单）功能的所有必要测试。
b)各测试均应彼此独立。

2.文档
a)README 文档：README 文档含有成功运行应用的所有详细步骤。
b)注释:设有能有效解释较长代码程序的注释。
c)代码质量:代码格式应保持前后一致，代码应易读、具有逻辑性并符合优达学城 JavaScript 样式指南的规定。

进行 JavaScript 测试 课程
下载所需项目资源。
在浏览器中检查应用程序的各项功能。
浏览应用程序 HTML (./index.html)、CSS (./css/style.css) 和 JavaScript (./js/app.js)， 了解其作用方式。
浏览 ./jasmine/spec/feedreader.js 中的 Jasmine spec 文件， 查看 Jasmine 文档。
编辑 ./js/app.js 中的 allFeeds 变量，使 提供的测试出错，然后观察 Jasmine 在应用程序中对该错误进行可视化处理的 结果。
将 allFeeds 变量返回至传递状态。
编写测试对 allFeeds 对象中的每条反馈执行循环操作， 并确保其具有定义的非空 URL。
编写测试对 allFeeds 对象中的每条反馈执行循环操作， 并确保其具有定义的非空名称。
编写一个新测试套件，命名 "The menu"。
编写测试以确保菜单 (menu) 元素在默认情况下处于隐藏状态。 并要求分析 HTML 和 CSS，以确定 菜单元素的隐藏/显示是如何实现的。
编写测试，确保当点击菜单时， 菜单改变其可见性。测试应有两项期望：当点击时，菜单是否显示， 当再次点击时，菜单是否隐藏。
编写测试套件并命名 "Initial Entries"。
编写测试，确保在调用并执行 loadFeed 函数后， 在 .feed 容器中至少存在一个 .entry 元素。
编写测试套件并命名 "New Feed Selection"。
编写测试，确保每当 loadFeed 函数加载一条新反馈后， 内容会相应更改。
测试不应依赖其他测试的结果。
应使用回调函数确保在测试之前 加载反馈。
实施针对未定义变量和越界数据访问的 错误处理。
完成以上内容后，即可通过所有测试。
编写 README 文件，详细说明成功运行应用程序 所需的所有步骤。如果你添加了额外测试（针对优达学城测试覆盖），则需要提供相关文档，介绍这些未来功能 并说明测试目的。